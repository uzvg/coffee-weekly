created: 20230303023049078
modified: 20230305162526485
tags: tiddlywiki
title: tiddlywiki筛选器入门
type: text/vnd.tiddlywiki

!! 运行过程说明：

`filter`的运行过程就像Linux shell中的管理，所有tiddler被列在管道的左侧，经过一系列筛选(filter)，最终被从管道的右侧“吐出来”，得到最终想要得到的tiddler。

!!! 单次运行：

# `[title[New Tiddler]]`

#* 筛选出标题为`New Tiddler`的tiddler

# `[tag[tiddlywiki]]`

#* 筛选出所有被打上“tiddlywiki”标签的tiddler

# `[links[]]`

#* `links`筛选器比较特殊，它会筛选当前tiddler中被链接的所有tiddler，例如： `[title[filter]links[]]`

#** 该筛选器筛选出标题为filter的tiddler中被链接到的所有tiddler，包括以`$:/`开头的系统自带的tiddler

#** 排除系统自带tiddler：`[title[filter]!is[system]links[]]`


# `[backlinks[]]`

#* 反向链接，筛选出引用tiddler的其他所有tiddler；
#* 例如： `[[filter]backlinks[]]`, 筛选出引用标题为`filter`的tiddler的其他所有tiddler

!!! 多次运行：

!! 过滤器(filter)语法：

`operator:suffix[parameter]`

`操作符:后缀[参数]`

* 操作符描述筛选器执行的任务
* 后缀通过一些特定字段进一步细化运算符的含义
* 参数描述了操作符的对象

后缀跟参数的确切含义，取决于具体使用的操作符，例如：`[tag[tiddlywiki]]`

* `tag`是操作符
* `tiddlywiki`是参数
* 大多数情况，参数往往用`[]`括起来，少数情况下，也可以用`<>`或者`{}`🚩🚩🚩🚩🚩

!!! 输入跟输出：

大多数情况下，filter会以管道的形式对tiddler进行筛选，少数特殊情况，比如在表达式中存在一个`constructor`，则filter会直接抛弃之前通过过滤的tiddler，用`constructor`构造的全新的tiddler输出作为代替。

如：`[tag[tiddlywiki]title[Transclusion]]`

* 其中，`title`就是一个`constructor`, 此时`constructor`左侧由`tag[tiddlywiki]`所筛选出来的tiddler会被直接抛弃，转而直接使用由`constructor`👉`title`构造出的tiddler👉`Transclusion`

* 因此，此次筛选的运行结果中，只有`Transclusion`这一个tiddler
* 如果我们用`constructor`，如`title`向右侧的管道添加一个并不存在的tiddler，会发生什么情况？
** 该tiddler会通过`constructor`自身进行的筛选，就像该tiddler真实存在，但并不会通过后续筛选，如`[[Transclusion]tag[tiddlywiki]]`的输出将为空。

* 如何筛选这种并不存在的tiddler？
** 添加`is[tiddler]`筛选器
** 如：`[title[ATiddlerDoNotExist]]`会输出一个标题名为：`ATiddlerDoNotExist`的tiddler
** `[title[ATiddlerDoNotExist]!is[tiddler]]`会筛选出其中并不存在的tiddler。

!!! 多后缀跟多参数：

* 少数操作符支持多个后缀，每个后缀都由冒号引入，

** 如`search:myfield:literal[parameter]`

* 少数操作符支持多个参数，由逗号隔开
** 像`pad[5],[-]`

!! 常犯的错误：

* 筛选表达式中添加''空格''，如`[!is[system] links[]]`
