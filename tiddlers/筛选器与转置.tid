created: 20230321185849739
modified: 20230326103129101
tags: tiddlywiki
title: 筛选器与转置
type: text/vnd.tiddlywiki

筛选器与转置有两种结合方式：

* 将筛选结果转置到tiddler中
* 将转置的结果传递给筛选器

!! 将筛选器的结果转置到当前tiddler中

找到标签为tiddlywiki的前5个tiddler：`{{{ [tag[tiddlywiki]first[5]] }}}`

结果为：

{{{ [tag[tiddlywiki]first[5]]}}}

更常见的用法：

跟tiddlywiki有关的笔记共有<$text text={{{ [tag[tiddlywiki]count[]] }}}/>条

!! 将转置的结果传递给筛选器

假如我们想给列表的形式显示`Jane`的家庭成员，我们可能想到的做法是：

先定义一个宏：

```html
\define myfilt(people)
[enlist[$people$]]
\end
```

然后调用该宏：

```html
<$list filter=<<myfilt {{!!familyMems}}>> >
```

⚠️ 但这个用法是错误的，因为简化的宏调用中不能直接使用宏转置，想要使用宏调用中使用转置的结果，必须使用`<$macrocall>`，即宏调用组件：

```html
<$list filter=<$macrocall $name="myfilt" people={{!!family}}/>>
```

⚠️ 但很遗憾的是，这种写法也是错误的，因为我们不能让一个组件成为另一个组件的属性值，在这个例子中，让`macrocall` 组件成为`list`组件的`filter`的属性值，这种做法是错误的。

好了，那么正确用法是什么呢？

正确用法1：

```html
<ul>
    <$set name="familyfield" value={{!!family}}>
        <$list filter="[enlist<familyfield>]">
            <li>{{!!title}}: {{!!phone}}</li>
        </$list>
    </$set>
</ul>
```

思路：因为不管是使用简化的宏调用，还是使用宏调用组件，都无法正确地将转置的结果传递给筛选器，所以，我们可以先将转置得到的值保存到一个变量中，然后在筛选器中调用该变量，得到最终的值。

需要注意的是，在`enlist`筛选器中调用`familyfield`转置的值，使用的是一个尖括号，而不是我们常见的两个，这个跟连续筛选器中使用一个方括号的情况是一样的。

